from enum import Enum, auto
from typing import List, Dict

import spotipy
from spotipy import Spotify
from spotipy.oauth2 import SpotifyClientCredentials


class ComposerProps(Enum):
    NAME = "name"
    POPULARITY = "popularity"
    FOLLOWERS = "followers"
    NUM_ALBUMS = "num_albums"
    RELATED_ARTISTS = "related_artists"


spotify = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials())


def get_componist_search_results(conn: Spotify, search_str: str) -> Dict[str, str]:
    """
    :param conn: API connection generated by Spotify() function
            e.g. spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials())
    :param search_str: componist name to search for. Best give all first names, e.g. Johann Friedrich Ruhe
    :return: Dictionary containing the uri of the search result as key and the name as value
    """
    search_results = conn.search(search_str, type="artist")

    return {search_result["uri"]: search_result["name"] for search_result in search_results["artists"]["items"]}


def __get_composer_related_artists(conn: Spotify, uri: str):
    rel_artists = conn.artist_related_artists(uri)
    return {artist["uri"]: artist["name"] for artist in rel_artists["artists"]}


def get_composer_props(conn: Spotify, uri: str, props: List[ComposerProps]):
    result = {}
    artist = conn.artist(uri)

    for prop in props:
        if prop == ComposerProps.NAME :
            result[prop] = artist["name"]
        if prop == ComposerProps.FOLLOWERS:
            result[prop] = artist["followers"]["total"]
        if prop == ComposerProps.POPULARITY:
            result[prop] = artist["popularity"]
        if prop == ComposerProps.RELATED_ARTISTS:
            result[prop] = __get_composer_related_artists(conn, uri)
        if prop == ComposerProps.NUM_ALBUMS:
            result[prop] = conn.artist_albums(uri)["total"]

    return result
